CSCB58 Project File: Summer 2017

Team Member A
-------------
First Name: Cho Yin
Last Name: Yong
Student Number: 1002897412
UofT E-mail Address: choyin.yong@mail.utoronto.ca


Team Member B
-------------
First Name: Austin
Last Name: Seto
Student Number: 1002969139
UofT E-mail Address: austin.seto@mail.utoronto.ca

Project Details
---------------
Project Title: Rhythm Game

Project Description: A rhythm game where the player will try to press the FGPA board buttons in sync with 'notes' that pass by on the screen.

Video URL:

Code URL (please upload a copy of this file to your repository at the end of the project as well, it will
serve as a useful resource for future development): https://github.com/choyiny/CSCB58_Project/

(this is set to a private repo until we have completed the project to prevent plagiarism)

Proposal
--------

What do you plan to have completed by the end of the first lab session?:
- Shifter bits with loading and reading for 100 bits (unable)
- Timer to shift notes to simulate playing song (unable)
- Counter to increase score (not attempted)
- Have a working "animation" of a moving block (unable)

What do you plan to have completed by the end of the second lab session?:
- finish a working animation of squares appearing on screen. (able - but shifts 2 at a time)
- Output rhythm to VGA (able)
- make script to generate rhythm bits (done - https://github.com/AustinSeto/Note-Map-Tool)

What do you plan to have completed by the end of the third lab session?:
- Have score increase if buttons pressed in the right time (completed)

(Extra) Between third lab and presentation:
- Choose difficulty level by speed
- Choose new songs
- Make what to click on screen clearer (add a green box)

What is your backup plan if things don't work out as planned?
- If VGA doesn't work, last resort is moving lights in LEDR (this works!)

What hardware will you need beyond the DE2 board?
Speakers, Microphone (if time permits) (time did not permit)


Motivations
-----------
How does this project relate to the material covered in CSCB58?:
It implements and brings together many components we have used (timers, shifter bits, finite state machines)

Why is this project interesting/cool (for CSCB58 students, and for non CSCB58 students?):
- It's a rhythm game that is made by hardware, not the typical rhythm game programmed in Java

Why did you personally choose this project?:
- It allows us to demonstrate our understanding in many parts of the course syllabus, such as outputting to VGA, shifting bits, using finite state machines, counters, etc.
- Because we love rhythm games
- Because we like music
- https://www.youtube.com/watch?v=dQw4w9WgXcQ <- Our inspiration

Attributions
------------
Provide a complete list of any external resources your project used (attributions should also be included in your
code).  

- VGA Module from CSCB58 Summer 2017 Lab 6 Part 2
- http://www.eecg.utoronto.ca/~jayar/ece241_08F/vga/vga-download.html (Converting BMP to MIF)

Updates
-------

Week 1: We attempted to run our code in the FGPA board. Unfortunately the first half of the lab was dedicated to JTAG Chain Errors, and we ended up not being able to fully test our code. We implemented a verilog design of a schematic we drew to draw squares on the VGA module, but it wasn't fully working as intended. Since we weren't able to get anything significant working, we have currently lowered our goal to just process 1 type of squares in 1 horizontal line.

Week 2:  We found some errors in our connections preventing us from drawing properly. We have remedied this and also got a 100 bit register for storing a song with shifting capabilities. There is a strange bug that causes it to sometimes shift two bits at a time. We are looking to potentially expand to longer songs and songs with up to three notes now as well. A score counter is also the next thing to implement. Nicer graphics (AKA not just squares) would be a plus as well.

Week 3: We successfully made a module that kept track of the score, and output more squares to the screen. Now we have three rows of squares moving from left to right independently. Players have to press KEY[2:0] according to what is displayed on the screen. We have a working animation, and although the bits still sometimes shift 2 at a time (we still do not know what caused it - everything works fine on a manual clock with SW[17]), somehow it magically worked at the last minute. We suspect that CLOCK_50 on some boards have incompatibility.

However, due to time constraints, and there weren't any digital speakers, we must give up on using the speakers with this project. This doesn't decrease the coolness of our project as it is still very exciting to play the game (we've playtested a bit, it was very intense)

Extra Labs: Added many new features and fix all bugs. A song selector with multiple songs to load, a speed selector for difficulty, a counter to display current score and the combo, and a display for the highest possible score. A background to make what to click easier. Things went very smoothly.
